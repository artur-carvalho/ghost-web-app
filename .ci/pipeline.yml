name: $(BuildDefinitionName).$(DayOfYear)$(Rev:.r)
trigger:
  batch: "true"
  branches:
    include:
      - main

pool:
  vmImage: "ubuntu-20.04"

variables: []

stages:
  - stage:
    jobs:
      - job: Terraform_Deploy
        displayName: "Terraform Deploy"
        steps:
          - task: TerraformInstaller@0
            displayName: "Install Terraform"
            inputs:
              terraformVersion: "1.0.11"

          - task: TerraformTaskV2@2
            displayName: "Terraform Init"
            inputs:
              provider: "azurerm"
              command: "init"
              backendServiceArm: "demo-svc"
              backendAzureRmResourceGroupName: "terraform-backend"
              backendAzureRmStorageAccountName: "pocghosttfstate"
              backendAzureRmContainerName: "tfstate"
              backendAzureRmKey: "terraform.state"
              workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/

          - task: TerraformTaskV2@2
            displayName: "Terraform Plan"
            inputs:
              provider: "azurerm"
              command: "plan"
              commandOptions: "-out infra_tfplan"
              environmentServiceNameAzureRM: "demo-svc"
              workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/

# Apply only runs if branch is main
          - task: TerraformTaskV2@2
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
            displayName: "Terraform Apply"
            inputs:
              provider: "azurerm"
              command: "apply"
              commandOptions: "-auto-approve -input=false infra_tfplan"
              environmentServiceNameAzureRM: "demo-svc"
              workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/

# Deploy AKS Application

      - job: aks_deploy
        steps:
              - task: AzureCLI@2
                displayName: 'Deploy Ghost to AKS Cluster'
                dependsOn: [Terraform_Deploy]
                inputs:
                  azureSubscription: 'demo-svc'
                  scriptType: bash
                  scriptLocation: inlineScript
                  addSpnToEnvironment: true
                  inlineScript: |
                    #!/usr/bin/env bash
                    set -x

                    AKS_RG="poc-ghost-spoke-rg01"
                    AKS_NAME="ghost-aks-prod"

                    # Get AKS Credentials
                    az aks get-credentials -g $AKS_RG -n $AKS_NAME --admin

                    kubectl create -f https://raw.githubusercontent.com/artur-carvalho/ghost-web-app/main/ghost-app/deployment.yml
